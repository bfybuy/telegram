name: deploy to lambda
on: [push]
jobs:

  deploy_zip:
    name: deploy lambda function
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.20.x]
    steps:
      - name: checkout source code
        uses: actions/checkout@v3

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install deps
        run: npm install

      - uses: actions/upload-artifact@v2
        with:
          name: npm artifacts
          path: node_modules/

      - name: Zip code
        run: zip -r deployment.zip .

      - name: default deploy
        uses: appleboy/lambda-action@v0.1.9
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: InteractsWithTelegram
          zip_file: deployment.zip
          memory_size: 128
          timeout: 10
          handler: app.Telegram
          role: arn:aws:iam::963701236421:role/service-role/InteractsWithTelegram-role-urf1ml6f
          runtime: nodejs16.x
          debug: true
          environment: TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }},APP_URL=${{ secrets.APP_URL }}
